<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Young Gyu's Blog</title>
    <link href="/atom.xml" rel="self" />
    <link href="" />
    <id>/atom.xml</id>
    <author>
        <name>Young Gyu Park</name>
        <email>ygpark2@gmail.com</email>
    </author>
    <updated>2016-12-13T02:17:11Z</updated>
    <entry>
    <title>Elasticsearch Reference</title>
    <link href="/posts/2016/12/13/elasticsearch_reference.html" />
    <id>/posts/2016/12/13/elasticsearch_reference.html</id>
    <published>2016-12-13T02:17:11Z</published>
    <updated>2016-12-13T02:17:11Z</updated>
    <summary type="html"><![CDATA[<h1 id="document">Document</h1>
<h2 id="api-conventions">API Conventions</h2>
<p>elasticsearch REST API는 HTTP위에서 JSON을 사용합니다.</p>
<p>달리 명시되지 아니하는 한, 이 장에서 사용하는 컨벤션은 REST API를 통해서</p>
<h3 id="multiple-indices">Multiple Indices</h3>
<p>Most APIs that refer to an index parameter support execution across multiple indices, using simple test1,test2,test3 notation (or _all for all indices). It also support wildcards, for example: test* or <em>test or te</em>t or <em>test</em>, and the ability to “add” (+) and “remove” (-), for example: +test*,-test3.</p>
<p>모든 멀티 인덱스 API들은 다음의 url query 문자열 파라메터를 지원한다:</p>
<ul>
<li><p>ignore_unavailable 지정된 인덱스들이 가용하지 않을때 무시할지 말지를 정하는 제어 지시자. 이것은 또한 존재하지 않거나 닫힌 인덱스들도 포함한다. true 또는 false값을 가질 수 있다.</p></li>
<li><p>allow_no_indices Controls whether to fail if a wildcard indices expressions results into no concrete indices. Either true or false can be specified. For example if the wildcard expression foo* is specified and no indices are available that start with foo then depending on this setting the request will fail. This setting is also applicable when _all, * or no index has been specified. This settings also applies for aliases, in case an alias points to a closed index. expand_wildcards Controls to what kind of concrete indices wildcard indices expression expand to. If open is specified then the wildcard expression is expanded to only open indices and if closed is specified then the wildcard expression is expanded only to closed indices. Also both values (open,closed) can be specified to expand to all indices. If none is specified then wildcard expansion will be disabled and if all is specified, wildcard expressions will expand to all indices (this is equivalent to specifying open,closed).</p></li>
</ul>
<p>The defaults settings for the above parameters depend on the api being used.</p>
<p>Note Single index APIs such as the Document APIs and the single-index alias APIs do not support multiple indices.</p>
<h3 id="date-math-support-in-index-names">Date math support in index names</h3>
<p>Date math index name resolution enables you to search a range of time-series indices, rather than searching all of your time-series indices and filtering the results or maintaining aliases. Limiting the number of indices that are searched reduces the load on the cluster and improves execution performance. For example, if you are searching for errors in your daily logs, you can use a date math name template to restrict the search to the past two days.</p>
<p>Almost all APIs that have an index parameter, support date math in the index parameter value.</p>
<p>A date math index name takes the following form:</p>
<p><static_name{date_math_expr{date_format|time_zone}}> Where:</p>
<p>static_name</p>
<p>is the static text part of the name</p>
<p>date_math_expr</p>
<p>is a dynamic date math expression that computes the date dynamically</p>
<p>date_format</p>
<p>is the optional format in which the computed date should be rendered. Defaults to YYYY.MM.dd.</p>
<p>time_zone</p>
<p>is the optional time zone . Defaults to utc.</p>
<p>You must enclose date math index name expressions within angle brackets, and all special characters should be URI encoded. For example:</p>
<pre><code># GET /&lt;logstash-{now/d}&gt;/_search
GET /%3Clogstash-%7Bnow%2Fd%7D%3E/_search
{
  &quot;query&quot; : {
    &quot;match&quot;: {
      &quot;test&quot;: &quot;data&quot;
    }
  }
}</code></pre>
<p>COPY AS CURLVIEW IN CONSOLE Note Percent encoding of date math characters The special characters used for date rounding must be URI encoded as follows:</p>
<table>
<thead>
<tr class="header">
<th>Markdown</th>
<th>Less</th>
<th>Pretty</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><em>Still</em></td>
<td><code>renders</code></td>
<td><strong>nicely</strong></td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th>&lt;</th>
<th>%3C</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&gt;</td>
<td>%3E</td>
</tr>
<tr class="even">
<td>/</td>
<td>%2F</td>
</tr>
<tr class="odd">
<td>{</td>
<td>%7B</td>
</tr>
<tr class="even">
<td>}</td>
<td>%7D</td>
</tr>
<tr class="odd">
<td>*</td>
<td>*</td>
</tr>
<tr class="even">
<td>+</td>
<td>%2B</td>
</tr>
<tr class="odd">
<td>:</td>
<td>%3A</td>
</tr>
</tbody>
</table>
<p>The following example shows different forms of date math index names and the final index names they resolve to given the current time is 22rd March 2024 noon utc.</p>
<p>Expression Resolves to <logstash-{now/d}></p>
<p>logstash-2024.03.22</p>
<p><logstash-{now/M}></p>
<p>logstash-2024.03.01</p>
<p><logstash-{now/M{YYYY.MM}}></p>
<p>logstash-2024.03</p>
<p><logstash-{now/M-1M{YYYY.MM}}></p>
<p>logstash-2024.02</p>
<p><logstash-{now/d{YYYY.MM.dd|+12:00}}></p>
<p>logstash-2024.03.23</p>
<p>To use the characters { and } in the static part of an index name template, escape them with a backslash , for example:</p>
<p><elastic\\{ON\\}-{now/M}> resolves to elastic{ON}-2024.03.01 The following example shows a search request that searches the Logstash indices for the past three days, assuming the indices use the default Logstash index name format, logstash-YYYY.MM.dd.</p>
<h1 id="get-_search-get-3clogstash-7bnow2fd-2d7d3e2c3clogstash-7bnow2fd-1d7d3e2c3clogstash-7bnow2fd7d3e_search-query-match-test-data">GET /<logstash-{now/d-2d}>,<logstash-{now/d-1d}>,<logstash-{now/d}>/_search GET /%3Clogstash-%7Bnow%2Fd-2d%7D%3E%2C%3Clogstash-%7Bnow%2Fd-1d%7D%3E%2C%3Clogstash-%7Bnow%2Fd%7D%3E/_search { “query” : { “match”: { “test”: “data” } } }</h1>
<h3 id="common-options">Common options</h3>
<h3 id="url-based-access-control">URL-based access control</h3>]]></summary>
</entry>
<entry>
    <title>Functor, Applicative, and Monad</title>
    <link href="/posts/2016/12/12/haskell_functor_applicative_monad.html" />
    <id>/posts/2016/12/12/haskell_functor_applicative_monad.html</id>
    <published>2016-12-12T03:55:56Z</published>
    <updated>2016-12-12T03:55:56Z</updated>
    <summary type="html"><![CDATA[<p>https://www.schoolofhaskell.com/school/advanced-haskell/functors-applicative-functors-and-monads</p>
<p>아주 간단한 문제로 시작해봅시다. 우리는 사용자로부터 생일을 입력받기를 원합니다. 그리고, 2020년에 사용자의 나이를 알려주는 프로그램을 작성할 것입니다. read 함수를 사용한 아주 간단한 프로그램입니다.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    year <span class="ot">&lt;-</span> getLine
    putStrLn <span class="fu">$</span> <span class="st">&quot;In 2020, you will be: &quot;</span> <span class="fu">++</span> show (<span class="dv">2020</span> <span class="fu">-</span> read year)</code></pre></div>
<!--more-->
<p>만약 그 프로그램을 실행 후 유효한 년도를 입력하면, 올바른 답을 구하실 것입니다. 만약 이상한 년도 값을 입력하면 어떤 일이 벌어질까요?</p>
<div class="sourceCode"><pre class="sourceCode sh"><code class="sourceCode bash"><span class="ex">Please</span> enter your birth year
<span class="ex">hello</span>
<span class="ex">main.hs</span>: Prelude.read: no parse</code></pre></div>
<p>사용자 입력은 문자로 들어오고 그 문자를 Integer로 변환할려고 합니다. 그러나, 모든 문자들이 항상 유효한 Integer값은 아닙니다. read는 partial 함수입니다. 그것은 어떤 상황에서는 에러를 발생시킬수 있다는 것을 의미합니다.</p>
<p>좀더 견고한 프로그램을 작성하는 방법은 Maybe Integer 값을 반환하는 readMay함수를 쓰는것입니다. 이 함수는<br />
A more resilient way to write our code is to use the readMay function, which will return a Maybe Integer value. This makes it clear with the types themselves that the parse may succeed or fail. To test this out, try running the following code:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

main <span class="fu">=</span> <span class="kw">do</span>
    <span class="co">-- We use explicit types to tell the compiler how to try and parse the</span>
    <span class="co">-- string.</span>
    print (readMay <span class="st">&quot;1980&quot;</span><span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Integer</span>)
    print (readMay <span class="st">&quot;hello&quot;</span><span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Integer</span>)
    print (readMay <span class="st">&quot;2000&quot;</span><span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Integer</span>)
    print (readMay <span class="st">&quot;two-thousand&quot;</span><span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Integer</span>)</code></pre></div>
<p>So how can we use this to solve our original problem? We need to now determine if the result of readMay was successful (as Just) or failed (a Nothing). One way to do this is with pattern matching:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    yearString <span class="ot">&lt;-</span> getLine
    <span class="kw">case</span> readMay yearString <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided an invalid year&quot;</span>
        <span class="dt">Just</span> year <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In 2020, you will be: &quot;</span> <span class="fu">++</span> show (<span class="dv">2020</span> <span class="fu">-</span> year)</code></pre></div>
<p>Decoupling code This code is a bit coupled; let’s split it up to have a separate function for displaying the output to the user, and another separate function for calculating the age.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided an invalid year&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In 2020, you will be: &quot;</span> <span class="fu">++</span> show age

yearToAge year <span class="fu">=</span> <span class="dv">2020</span> <span class="fu">-</span> year

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    yearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span>
            <span class="kw">case</span> readMay yearString <span class="kw">of</span>
                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
                <span class="dt">Just</span> year <span class="ot">-&gt;</span> <span class="dt">Just</span> (yearToAge year)
    displayAge maybeAge</code></pre></div>
<p>This code does exactly the same thing as our previous version. But the definition of maybeAge in the main function looks pretty repetitive to me. We check if the parse year is Nothing. If it’s Nothing, we return Nothing. If it’s Just, we return Just, after applying the function yearToAge. That seems like a lot of line noise to do something simple. All we want is to conditionally apply yearToAge.</p>
<p>Functors Fortunately, we have a helper function to do just that. fmap, or functor mapping, will apply some function over the value contained by a functor. Maybe is one example of a functor, another common one is a list. In the case of Maybe, fmap does precisely what we described above. So we can replace our code with:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided an invalid year&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In 2020, you will be: &quot;</span> <span class="fu">++</span> show age

yearToAge year <span class="fu">=</span> <span class="dv">2020</span> <span class="fu">-</span> year

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    yearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> fmap yearToAge (readMay yearString)
    displayAge maybeAge</code></pre></div>
<p>Our code definitely got shorter, and hopefully a bit clearer as well. Now it’s obvious that all we’re doing is applying the yearToAge function over the contents of the Maybe value.</p>
<p>So what is a functor? It’s some kind of container of values. In Maybe, our container holds zero or one values. With lists, we have a container for zero or more values. Some containers are even more exotic; the IO functor is actually providing an action to perform in order to retrieve a value. The only thing functors share is that they provide some fmap function which lets you modify their contents.</p>
<p>do-notation We have another option as well: we can use do-notation. This is the same way we’ve been writing our main function in so far. That’s because- as we mentioned in the previous paragraph- IO is a functor as well. Let’s see how we can change our code to not use fmap:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided an invalid year&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In 2020, you will be: &quot;</span> <span class="fu">++</span> show age

yearToAge year <span class="fu">=</span> <span class="dv">2020</span> <span class="fu">-</span> year

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    yearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            yearInteger <span class="ot">&lt;-</span> readMay yearString
            return <span class="fu">$</span> yearToAge yearInteger
    displayAge maybeAge</code></pre></div>
<p>Inside the do-block, we have the slurp operator &lt;-. This operator is special for do-notation, and is used to pull a value out of its wrapper (in this case, Maybe). Once we’ve extracted the value, we can manipulate it with normal functions, like yearToAge. When we complete our do-block, we have to return a value wrapped up in that container again. That’s what the return function does.</p>
<p>do-notation isn’t available for all Functors; it’s a special feature reserved only for Monads. Monads are an extension of Functors that provide a little extra power. We’re not really taking advantage of any of that extra power here; we’ll need to make our program more complicated to demonstrate it.</p>
<p>Dealing with two variables It’s kind of limiting that we have a hard-coded year to compare against. Let’s fix that by allowing the user to specify the “future year.” We’ll start off with a simple implementation using pattern matching and then move back to do notation.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span>
            <span class="kw">case</span> readMay birthYearString <span class="kw">of</span>
                <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
                <span class="dt">Just</span> birthYear <span class="ot">-&gt;</span>
                    <span class="kw">case</span> readMay futureYearString <span class="kw">of</span>
                        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
                        <span class="dt">Just</span> futureYear <span class="ot">-&gt;</span> <span class="dt">Just</span> (futureYear <span class="fu">-</span> birthYear)
    displayAge maybeAge</code></pre></div>
<p>OK, it gets the job done… but it’s very tedious. Fortunately, do-notation makes this kind of code really simple:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            birthYear <span class="ot">&lt;-</span> readMay birthYearString
            futureYear <span class="ot">&lt;-</span> readMay futureYearString
            return <span class="fu">$</span> yearDiff futureYear birthYear
    displayAge maybeAge</code></pre></div>
<p>This is very convenient: we’ve now slurped our two values in our do-notation. If either parse returns Nothing, then the entire do-block will return Nothing. This demonstrates an important property about Maybe: it provides short circuiting.</p>
<p>Without resorting to other helper functions or pattern matching, there’s no way to write this code using just fmap. So we’ve found an example of code that requires more power than Functors provide, and Monads provide that power.</p>
<p>Partial application But maybe there’s something else that provides enough power to write our two-variable code without the full power of Monad. To see what this might be, let’s look more carefully at our types.</p>
<p>We’re working with two values: readMay birthYearString and readMay futureYearString. Both of these values have the type Maybe Integer. And we want to apply the function yearDiff, which has the type Integer -&gt; Integer -&gt; Integer.</p>
<p>If we go back to trying to use fmap, we’ll seemingly run into a bit of a problem. The type of fmap- specialized for Maybe and Integer- is (Integer -&gt; a) -&gt; Maybe Integer -&gt; Maybe a. In other words, it takes a function that takes a single argument (an Integer) and returns a value of some type a, takes a second argument of a Maybe Integer, and gives back a value of type Maybe a. But our function- yearDiff- actually takes two arguments, not one. So fmap can’t be used at all, right?</p>
<p>Not true actually. This is where one of Haskell’s very powerful features comes into play. Any time we have a function of two arguments, we can also look at is as a function of one argument which returns a function. We can make this more clear with parentheses:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">yearDiff ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>
<span class="ot">yearDiff ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>)
<span class="dt">So</span> how does that help us<span class="fu">?</span> <span class="dt">We</span> can look at the fmap function as<span class="fu">:</span>

fmap<span class="ot"> ::</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>))
     <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>)
<span class="dt">Then</span> when we apply fmap to yearDiff, we end up with<span class="fu">:</span>

fmap<span class="ot"> yearDiff ::</span> <span class="dt">Maybe</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>)</code></pre></div>
<p>That’s pretty cool. We can apply this to our readMay futureYearString and end up with:</p>
<p>fmap yearDiff (readMay futureYearString) :: Maybe (Integer -&gt; Integer) That’s certainly very interesting, but it doesn’t help us. We need to somehow apply this value of type Maybe (Integer -&gt; Integer) to our readMay birthYearString of type Maybe Integer. We can do this with do-notation:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            yearToAge <span class="ot">&lt;-</span> fmap yearDiff (readMay futureYearString)
            birthYear <span class="ot">&lt;-</span> readMay birthYearString
            return <span class="fu">$</span> yearToAge birthYear
    displayAge maybeAge</code></pre></div>
<p>We can even use fmap twice and avoid the second slurp:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            yearToAge <span class="ot">&lt;-</span> fmap yearDiff (readMay futureYearString)
            fmap yearToAge (readMay birthYearString)
    displayAge maybeAge</code></pre></div>
<p>But we don’t have a way to apply our Maybe (Integer -&gt; Integer) function to our Maybe Integer directly.</p>
<p>Applicative functors And now we get to our final concept: applicative functors. The idea is simple: we want to be able to apply a function which is inside a functor to a value inside a functor. The magic operator for this is &lt;*&gt;. Let’s see how it works in our example:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)
<span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;*&gt;))

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span>
            fmap yearDiff (readMay futureYearString)
                <span class="fu">&lt;*&gt;</span> readMay birthYearString
    displayAge maybeAge</code></pre></div>
<p>In fact, the combination of fmap and &lt;*&gt; is so common that we have a special operator, &lt;$&gt;, which is a synonym for fmap. That means we can make our code just a little prettier:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)
<span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;$&gt;), (&lt;*&gt;))

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
<span class="co">-- show</span>
    <span class="kw">let</span> maybeAge <span class="fu">=</span> yearDiff
            <span class="fu">&lt;$&gt;</span> readMay futureYearString
            <span class="fu">&lt;*&gt;</span> readMay birthYearString
<span class="co">-- /show</span>
    displayAge maybeAge</code></pre></div>
<p>Notice the distinction between &lt;$&gt; and &lt;*&gt;. The former uses a function which is not wrapped in a functor, while the latter applies a function which is wrapped up.</p>
<p>So we don’t need Monads? So if we can do such great stuff with functors and applicative functors, why do we need monads at all? The terse answer is context sensitivity: with a monad, you can make decisions on which processing path to follow based on previous results. With applicative functors, you have to always apply the same functions.</p>
<p>Let’s give a contrived example: if the future year is less than the birth year, we’ll assume that the user just got confused and entered the values in reverse, so we’ll automatically fix it by reversing the arguments to yearDiff. With do-notation and an if statement, it’s easy:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            futureYear <span class="ot">&lt;-</span> readMay futureYearString
            birthYear <span class="ot">&lt;-</span> readMay birthYearString
            return <span class="fu">$</span>
                <span class="kw">if</span> futureYear <span class="fu">&lt;</span> birthYear
                    <span class="kw">then</span> yearDiff birthYear futureYear
                    <span class="kw">else</span> yearDiff futureYear birthYear
    displayAge maybeAge</code></pre></div>
<p>Exercises Implement fmap using &lt;*&gt; and return.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;*&gt;), <span class="dt">Applicative</span>)
<span class="kw">import </span><span class="dt">Prelude</span> (return, <span class="dt">Monad</span>)
<span class="kw">import qualified</span> <span class="dt">Prelude</span>

fmap<span class="ot"> ::</span> (<span class="dt">Applicative</span> m, <span class="dt">Monad</span> m) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (m a <span class="ot">-&gt;</span> m b)
<span class="co">-- show</span>
fmap <span class="fu">...</span> <span class="fu">...</span> <span class="fu">=</span> <span class="dt">FIXME</span>
<span class="co">-- /show</span>

main <span class="fu">=</span>
    <span class="kw">case</span> fmap (<span class="fu">Prelude.+</span> <span class="dv">1</span>) (<span class="dt">Prelude.Just</span> <span class="dv">2</span>) <span class="kw">of</span>
        <span class="dt">Prelude.Just</span> <span class="dv">3</span> <span class="ot">-&gt;</span> Prelude.putStrLn <span class="st">&quot;Good job!&quot;</span>
        _ <span class="ot">-&gt;</span> Prelude.putStrLn <span class="st">&quot;Try again&quot;</span>
<span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;*&gt;))

<span class="co">-- show</span>
myFmap function wrappedValue <span class="fu">=</span> return function <span class="fu">&lt;*&gt;</span> wrappedValue

main <span class="fu">=</span> print <span class="fu">$</span> myFmap (<span class="fu">+</span> <span class="dv">1</span>) <span class="fu">$</span> <span class="dt">Just</span> <span class="dv">5</span>
<span class="co">-- /show</span>
<span class="dt">How</span> is return implemented for the <span class="dt">Maybe</span> monad<span class="fu">?</span> <span class="dt">Try</span> replacing return with its implementation <span class="kw">in</span> the code above<span class="fu">.</span>

<span class="co">-- show</span>
returnMaybe <span class="fu">=</span> <span class="dt">FIXME</span>
<span class="co">-- /show</span>

main
    <span class="fu">|</span> returnMaybe <span class="st">&quot;Hello&quot;</span> <span class="fu">==</span> <span class="dt">Just</span> <span class="st">&quot;Hello&quot;</span> <span class="fu">=</span> putStrLn <span class="st">&quot;Correct!&quot;</span>
    <span class="fu">|</span> otherwise <span class="fu">=</span> putStrLn <span class="st">&quot;Incorrect, please try again&quot;</span>
return is simply the <span class="dt">Just</span> constructor<span class="fu">.</span> <span class="dt">This</span> gets defined as<span class="fu">:</span>

<span class="kw">instance</span> <span class="dt">Monad</span> <span class="dt">Maybe</span> <span class="kw">where</span>
    return <span class="fu">=</span> <span class="dt">Just</span></code></pre></div>
<p>yearDiff is really just subtraction. Try to replace the calls to yearDiff with explicit usage of the - operator.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            futureYear <span class="ot">&lt;-</span> readMay futureYearString
            birthYear <span class="ot">&lt;-</span> readMay birthYearString
            return <span class="fu">$</span>
<span class="co">-- show</span>
                <span class="kw">if</span> futureYear <span class="fu">&lt;</span> birthYear
                    <span class="kw">then</span> yearDiff birthYear futureYear
                    <span class="kw">else</span> yearDiff futureYear birthYear
<span class="co">-- /show</span>
    displayAge maybeAge
<span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            futureYear <span class="ot">&lt;-</span> readMay futureYearString
            birthYear <span class="ot">&lt;-</span> readMay birthYearString
            return <span class="fu">$</span>
<span class="co">-- show</span>
                <span class="kw">if</span> futureYear <span class="fu">&lt;</span> birthYear
                    <span class="kw">then</span> birthYear <span class="fu">-</span> futureYear
                    <span class="kw">else</span> futureYear <span class="fu">-</span> birthYear
<span class="co">-- /show</span>
    displayAge maybeAge</code></pre></div>
<p>It’s possible to write an applicative functor version of the auto-reverse-arguments code by modifying the yearDiff function. Try to do so.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)
<span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;$&gt;), (&lt;*&gt;))

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

<span class="co">-- show</span>
yearDiff futureYear birthYear <span class="fu">=</span> <span class="dt">FIXME</span>
<span class="co">-- /show</span>

main
    <span class="fu">|</span> yearDiff <span class="dv">5</span> <span class="dv">6</span> <span class="fu">==</span> <span class="dv">1</span> <span class="fu">=</span> putStrLn <span class="st">&quot;Correct!&quot;</span>
    <span class="fu">|</span> otherwise <span class="fu">=</span> putStrLn <span class="st">&quot;Please try again&quot;</span>
<span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

<span class="co">-- show</span>
yearDiff futureYear birthYear
    <span class="fu">|</span> futureYear <span class="fu">&gt;</span> birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear
    <span class="fu">|</span> otherwise <span class="fu">=</span> birthYear <span class="fu">-</span> futureYear
<span class="co">-- /show</span>

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            futureYear <span class="ot">&lt;-</span> readMay futureYearString
            birthYear <span class="ot">&lt;-</span> readMay birthYearString
            return <span class="fu">$</span>
                <span class="kw">if</span> futureYear <span class="fu">&lt;</span> birthYear
                    <span class="kw">then</span> yearDiff birthYear futureYear
                    <span class="kw">else</span> yearDiff futureYear birthYear
    displayAge maybeAge</code></pre></div>
<p>Now try to do it without modifying yearDiff directly, but by using a helper function which is applied to yearDiff.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Safe</span> (readMay)
<span class="kw">import </span><span class="dt">Control.Applicative</span> ((&lt;$&gt;), (&lt;*&gt;))

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear
<span class="co">-- show</span>
yourHelperFunction f <span class="fu">...</span>
<span class="co">-- /show</span>

main
    <span class="fu">|</span> yourHelperFunction yearDiff <span class="dv">5</span> <span class="dv">6</span> <span class="fu">==</span> <span class="dv">1</span> <span class="fu">=</span> putStrLn <span class="st">&quot;Correct!&quot;</span>
    <span class="fu">|</span> otherwise <span class="fu">=</span> putStrLn <span class="st">&quot;Please try again&quot;</span>
<span class="kw">import </span><span class="dt">Safe</span> (readMay)

displayAge maybeAge <span class="fu">=</span>
    <span class="kw">case</span> maybeAge <span class="kw">of</span>
        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;You provided invalid input&quot;</span>
        <span class="dt">Just</span> age <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> <span class="st">&quot;In that year, you will be: &quot;</span> <span class="fu">++</span> show age

yearDiff futureYear birthYear <span class="fu">=</span> futureYear <span class="fu">-</span> birthYear

main <span class="fu">=</span> <span class="kw">do</span>
    putStrLn <span class="st">&quot;Please enter your birth year&quot;</span>
    birthYearString <span class="ot">&lt;-</span> getLine
    putStrLn <span class="st">&quot;Please enter some year in the future&quot;</span>
    futureYearString <span class="ot">&lt;-</span> getLine
    <span class="kw">let</span> maybeAge <span class="fu">=</span> <span class="kw">do</span>
            futureYear <span class="ot">&lt;-</span> readMay futureYearString
            birthYear <span class="ot">&lt;-</span> readMay birthYearString
            return <span class="fu">$</span>
                <span class="kw">if</span> futureYear <span class="fu">&lt;</span> birthYear
                    <span class="kw">then</span> yourHelperFunction yearDiff birthYear futureYear
                    <span class="kw">else</span> yourHelperFunction yearDiff futureYear birthYear
    displayAge maybeAge

<span class="co">-- show</span>
yourHelperFunction f x y
    <span class="fu">|</span> x <span class="fu">&gt;</span> y <span class="fu">=</span> f x y
    <span class="fu">|</span> otherwise <span class="fu">=</span> f y x
<span class="co">-- /show</span></code></pre></div>]]></summary>
</entry>
<entry>
    <title>Today, food travels thousands of miles from farms to consumers. Why does this happen?</title>
    <link href="/posts/2016/06/02/ielts_writing_food_travels.html" />
    <id>/posts/2016/06/02/ielts_writing_food_travels.html</id>
    <published>2016-06-01T15:50:43Z</published>
    <updated>2016-06-01T15:50:43Z</updated>
    <summary type="html"><![CDATA[<p>Is this a positive or negative trend?</p>
<p>Nowadays, most of food we eat everyday is comming from thousands miles away even though some identical local food is available for purchasing. In this essay, I will dwell on why it is consistent and examine what impact it brought to our lives.</p>
<div>

</div>
<!--more-->
<p>First of all, technological advances in food transportation along with cheap oil price have allowed food industry to move greater quantities of food faster and over longer distances than ever before. More specifically, air transportation, high-speed rails and a cold-storage car are the ones which enable food to travel such a long distance. In addition to this, the high demand for food in a such densely populated city is a driving force to precipitate these technological development because locally grown food cannot meet such a high demand. Accordingly, it is inevitable to use those technological advancement to unravel the food shortage problem in such densely populated cities.</p>
<p>It is clear that this change has brought many negative effects to our lives in many respects. One ot the most detrimental effects is that most of food relying on long journey have to be processed with much toxic checmical to preserve the freshness of the products or prevent the food from decay. Such process will also cause many unexpected problems such as diseases caused by intake of the food, additional environmental contamination from the checmical process of the food. Additionally, the transportation of the food will also contribute to the aggravating global warming issue, since the food need to be delivered from the place it grow to a city in which most of consumer live.</p>
<p>In summary, the two most important factors, which are technological advances and food shortage in a densely populated city, are the main contributors to make this trend feasible. In my opinion, such trend seems to have many adverse effects and thus it is desirable to encourage people to consume more locally grown food and curtail the increasing population in a city.</p>]]></summary>
</entry>
<entry>
    <title>Traffic jams are a problem in many towns and cities. Some people suggest that governments should build wider roads in order to solve the problem</title>
    <link href="/posts/2016/06/01/ielts_writing_traffic_jams.html" />
    <id>/posts/2016/06/01/ielts_writing_traffic_jams.html</id>
    <published>2016-05-31T16:42:36Z</published>
    <updated>2016-05-31T16:42:36Z</updated>
    <summary type="html"><![CDATA[<p>Do you agree or disagree?</p>
<p>Aggravating traffic congestion is a major concern to many cities. Many people suggest different solutions for the problem. One of the solutions that is commonly debated is that governments should take a policy to construct wider roads which will target to increase the capacities of the roads to contain more cars. However, I firmly object the idea since the manner cannot be the ultimate solution for the problem.</p>
<div>

</div>
<!--more-->
<p>To begin with, it is not a very desirable idea to build a wider road since it will hamper the vitality of the city in various ways. More specifically, the policy to build a wider road will not make a city more livable as a city more focused on development for the convenience of the driver will not be a place where many people want to live. For example, there is a newly built city with 10 lanes of road in Brazil because they want to build a city which free from the common traffic jams problem. However, they sooner or later encounter another problem that nobody want to live the city because the city is only considering traffic issue by building a wide road.</p>
<p>Secondly, the effort to build a wider road will create more incentives for people to buy more cars, which exacerbate the traffic congestion again. It is ironic that the solution to lessen traffic congestion is actually contributing to make the problem worsen. For instance, about ten years ago, a mayor in my city announced a very robust plan to build wider roads to reslove the worsening traffic jams. However, the plan seems to be effective temporary but the convenience the plan brought palyed a role as an incentive to attract more people to buying cars.</p>
<p>In conclusion, I absolutely agree with the idea that governments should not abandon any policies to extend the road to alleviate the deteriorating traffic problem. Therefore, governments need to come up with idea as to how to reduce the number of cars instead of widening roads.</p>]]></summary>
</entry>
<entry>
    <title>Some working parents believe that child-care centers provide the best care for their children. However, others think family members, such as grandparents, provide the best care</title>
    <link href="/posts/2016/05/31/ielts_writing_child_care.html" />
    <id>/posts/2016/05/31/ielts_writing_child_care.html</id>
    <published>2016-05-30T16:20:08Z</published>
    <updated>2016-05-30T16:20:08Z</updated>
    <summary type="html"><![CDATA[<p>Discuss both views and give your own opinion.</p>
<p>It is quite controversial that childcare facilities will be the best place for children to be well taken care of, since other people believe that family members should be in charge of raising kids. In this essay, I will examine the two condradicting views and add my thought on the subject.</p>
<p>To begin with, it is no doubt that child-care facilities are more competent in comparison of child’s relatives in terms of taking care of children. This is because people who are working in the child-care centers are required to be trained and educated in a university or special education centers for childcare, which ehnace their speciality in childcare. In addition to this, most of child-care facilities are well designed and specialized to serve the purpose of nurturing kids, which is believed to be lacking in family home.</p>
<p>On the other hand, the most evident advantage we can gain from relatives involvement of nurturing children is that they can take care of kids with affection and interest. However, it is hard to find such strong affection and interest in child-care centers as people in the centers usually do not have any emotional connection with the kids they are raising. Another benefit from raising kids with the help of family members is that we can nurture children in the most comfortable environment, which is abosultely conducive to ensure a sense of security.</p>
<p>To sum up, the two differen point of views with regard to raising kids by family members or child-care centers seem to have their own advantages and disadvantages. In my opinion, raising kids with family members seems to provide the best environment for the kids in various aspects.</p>]]></summary>
</entry>
<entry>
    <title>Nowadays, people have unhealthy diets and do not do enough exercise</title>
    <link href="/posts/2016/05/30/ielts_writing_unhealthy_diets_exercise.html" />
    <id>/posts/2016/05/30/ielts_writing_unhealthy_diets_exercise.html</id>
    <published>2016-05-29T16:07:43Z</published>
    <updated>2016-05-29T16:07:43Z</updated>
    <summary type="html"><![CDATA[<p>Discuss the reasons for this and make suggestions on how to encourage people to have healthy lifestyles.</p>
<p>It is a grave concern in most societies that people are experiencing many health problems caused by instant food and lack of exercise. In this essay, I will analyze the reasons why this problems are persistent and probe what other solutions we can adopt to rein the increasing trend.</p>
<p>First of all, the most evident reason of encouraging people to have unhealthy food and discouraging people to have less exercise is people’s overloaded work. As the competition among people is severe, people hesitate to spend enough time to prepare a food and to exercise in gym. This is because they believe that the saved time from cooking food and not exercising can direct at enhancing their competitiveness in various aspects in a soceity. Thus their reckless and frequent intake of instant food and negligence in exercise resulted in the current health problem.</p>
<p>Accordingly, the most imminent task to mitigate the aggravating health issue among people is to lessen people’ work load, which will give some time to review themselves in terms of health. Furthermore, a community’s collective effort to curtail the accelerating competition in our soceity is also beneficial to minimize the worsening consequence of people’s health. Hence, soceity as a whole need to find out a way to reduce the level of competition and provide a specific policy to extricate people from their busy work.</p>
<p>In conclusion, the health probem seem to lie in the social structure to evoke more competition trying to exract more outcome from the employees, which endanger people’s health. Therefore, it is crucial to eradicate</p>]]></summary>
</entry>
<entry>
    <title>As well as making money, businesses also have social responsibilities.</title>
    <link href="/posts/2016/05/27/ielts_writing_business_responsibilities.html" />
    <id>/posts/2016/05/27/ielts_writing_business_responsibilities.html</id>
    <published>2016-05-26T16:12:31Z</published>
    <updated>2016-05-26T16:12:31Z</updated>
    <summary type="html"><![CDATA[<p>To what extent do you agree or disagree with this statement?</p>
<p>There is no denying that business have been large part of human activity. As the influence of business is increasing, people start to contemplate and require the social responsibility of a business. In my opinion, it is absurd argument that a business is completely free from the social responsibility because it is the organization for the purpose of pursuing profit.</p>
<p>To begin with, any human activities including business should take a certain amount of social responsibility because they are inextricably interwined with other people’s lives. For instance, if a factory release contaminated water into river without taking proper measure to purify the water, it might lead to jeopardizing other people’s lives. Considering the nature of business which prioritize the profit, it seems quite natural for the owner of the business to take an action to minimize the cost, which serve well the purpose of the business while hampering the quality of other people’s lives.</p>
<p>Secondly, most of business which is reluctant to fulfill their social responsibility seems to end up with the failure of the business because it will lose the customers’ trust. For example, the most prestigious company in my country did not faithfully conduct the rules to protect its employees from the hazardous material, which cause many employees’ lives. As a result, they cannot help but lose very large portion of market share due to the incident which lead to campaign against , which might result in the bankruptcy of the business.</p>
<p>In conclusion, it is necessarily not only for the success of a business but the community we live that any businesses pursuing profit should abide by the principles to serve social responsibilities. Therefore, we need to encourage businesses people to participate this movement to make our societies a better place by asking them to respect social responsibilities.</p>]]></summary>
</entry>
<entry>
    <title>Some people think news have no connection to people's lives, so it is a waste of time to read the news in the newspaper and watch television news programs.</title>
    <link href="/posts/2016/05/26/ielts_writing_news_television_programs.html" />
    <id>/posts/2016/05/26/ielts_writing_news_television_programs.html</id>
    <published>2016-05-25T20:05:36Z</published>
    <updated>2016-05-25T20:05:36Z</updated>
    <summary type="html"><![CDATA[<p>To what extent do you agree or disagree with this statement?</p>
<p>Some people criticize that reading a newspaper or watching television is completely a waste of time, since they believe that news generated by media are quite far from the human life. In my opinion, it is still worthwhile to pay attention to the newspaper and television news programs because the information people obtain from those media still in relation to human activities.</p>
<p>First of all, it is almost inconceivable that newspaper and news programs on television are not interested in people’s lives. This is because people’s lives are the most interesting news that most of people are inclined to know. If the media fails to meet the people’s interest or expectation, they will be highly likely to lead to the failure of their businesses. It is inevitable that people will not purchase the newspaper and watch the news programs only dealing with the issues which have nothing to do with human life.</p>
<p>Secondly, it is well known fact that the key role of the media is to deliver the news that are introducing people’s lives to the public. If the media companies do not properly conduct their fundamental role, it is actually undermining the ground of their existences. For example, if there are media companies which do not make an effort to publicize human activities such as protests, politics and business, the companies will naturally encounter severe public outcry for the negligence of their duties.</p>
<p>In summary, nobody cannot deny the fact that most of news are inextricably interwined with human lives. Therefore, the media companies need to fulfill their basic role as well as pay more attention to human life, which result in the success of their businesses.</p>]]></summary>
</entry>
<entry>
    <title>Many goverments think that economic progress is their most important goal. Some people, however, think that other types of progress are equally important for a country</title>
    <link href="/posts/2016/05/25/ielts_writing_economic_progress.html" />
    <id>/posts/2016/05/25/ielts_writing_economic_progress.html</id>
    <published>2016-05-24T15:14:23Z</published>
    <updated>2016-05-24T15:14:23Z</updated>
    <summary type="html"><![CDATA[<p>Discuss both these views and give your own opinion.</p>
<p>Many countries pursue economic development as their most prominent priority whereas other countries insist that there are other types of progress should take precedence over economic goal. In this essay, I will deal with these two point of views and express my thought on the issue.</p>
<p>To begin with, there is no denying that economic development should be the main priority in the governments’ goals because it is very hard to imagine that people living in poverty are happy. Basically, a country need to pursue economic progress at least to unravel people’s problems such as food, shelter and clothes. For example, people in North Korea certainly live in painful life as they can hardly find a food to eat. In addition to this, many people in North Korea also want to escape the country to find a better place to live, which result in the country hard to sustain. Thus, economic development should be the key goal for countries.</p>
<p>Despite the fact that many countries put the key priority on economic development, other countries believe that there are a variety of development should be done to enhance people’s happiness. It is no doubt that people will purse a better quality of life once they do not have any difficulty to meet their basic needs such as hunger, house and clothes. For instance, many advanced countries make a tremendous effort to make better environments where people are living. More specifically, most of economically abundant countries have been investing huge amount of money on cultural businesses to make our lives more enjoyable.</p>
<p>In conclusion, I absolutely agree with the idea that economic development should take precedence over other types of developments because people who cannot afford to buy a food will certainly live in great agony as well as be not interested in other types of developments. Therefore, countries should not treat the economic development equally with other types of developments.</p>]]></summary>
</entry>
<entry>
    <title>Many children are encouraged by their parents to get a part time job in their free time</title>
    <link href="/posts/2016/05/20/ielts_writing_part_time_job.html" />
    <id>/posts/2016/05/20/ielts_writing_part_time_job.html</id>
    <published>2016-05-19T16:37:59Z</published>
    <updated>2016-05-19T16:37:59Z</updated>
    <summary type="html"><![CDATA[<p>What are the advantages and disadvantages to children of doing so?</p>
<p>Many parents believe that having a part time job during vacations for their kids is certainly conducive to their growth in many aspects. However, others insist that studying should take precedence over an experience by having a part time job, since studying can guarantee a better income in their future career. In this article, I will deal with drawbacks and benefits that I can expect from the issue.</p>
<p>To begin with, it is very evident that students who had a part time jos during their vacations are able to gain a variety of experiences. Such experiences are hardly obtained through the class, since the key of the current education system is mainly to develop students’ intellectual ability. For example, I had worked in construction site for my summer vacation in high school, At the time, I did not anticipate that this experience will be connected with my future career but when I seek to find a job in construction companies, I was an advantageous in comparison to other candidates who are lack of pre-experience</p>
<p>Despite the fact that there are many advantages in having a part time job, nobody cannot deny the fact that there are some drawbacks as well in having a part time job. First and foremost, children need to sacrifice their time to study for having a part time job, which might result in losing their competitiveness in study. For instance, my high school friend who have ranked at the top in my class have worked in game room as a part time worker for his vacation. However, he was mesmerized with the game and spent most of his time to play a computer game, which make him fail to get an admission from the university.</p>
<p>In conclusion, it is clear that students having a part time job during a vacation had negative effects as well as positive ones. What is more important is how to benefit from the positive effects while minimizing the negative ones, which is right attitude for the part time job.</p>]]></summary>
</entry>

</feed>
